name: Spring Boot & Gradle CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --exclude-task test

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract Docker Image Tag from Commit Message
        id: extract_version
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          version=$(echo "$commit_message" | grep -oP 'version:\s*\K[\d.]+')
          echo "IMAGE_TAG=$version" >> $GITHUB_ENV

      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/talkka-server .

      - name: DockerHub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/talkka-server

      - name: Application Run
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}

          script: |
            docker kill ${{ secrets.PROJECT_NAME }}
            docker rm -f ${{ secrets.PROJECT_NAME }}
            docker images --format '{{.Repository}}:{{.Tag}}' | grep ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} | grep -v ${{ env.IMAGE_TAG }} | xargs -r docker rmi -f
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}:${{ env.IMAGE_TAG }}
            docker compose up -d --no-deps ${{ secrets.PROJECT_NAME }}