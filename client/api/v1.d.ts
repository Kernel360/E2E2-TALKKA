/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 유저 ID를 바탕으로 조회
         * @description 유저 ID를 바탕으로 조회합니다.
         */
        get: operations["getUser"];
        /**
         * 유저 ID를 바탕으로 수정
         * @description 유저 ID를 바탕으로 유저 정보를 수정합니다.
         */
        put: operations["updateUser"];
        post?: never;
        /**
         * 유저 ID 대상을 삭제
         * @description 유저 ID를 바탕으로 유저 정보를 삭제합니다.
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 로그인한 본인 정보 조회
         * @description 로그인한 본인의 정보를 조회합니다.
         */
        get: operations["getMe"];
        /**
         * 로그인한 본인 정보 수정
         * @description 로그인한 본인의 정보를 수정합니다.
         */
        put: operations["updateMe"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subway-review/{subway_review_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 지하철 리뷰 수정
         * @description 지하철 리뷰를 수정합니다.
         */
        put: operations["updateSubwayReview"];
        post?: never;
        /**
         * 지하철 리뷰 삭제
         * @description 지하철 리뷰를 삭제합니다.
         */
        delete: operations["deleteSubwayReview"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bus-review/{bus_review_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * 버스 리뷰 수정
         * @description 버스 리뷰를 수정합니다.
         */
        put: operations["updateBusReview"];
        post?: never;
        /**
         * 버스 리뷰 삭제
         * @description 버스 리뷰를 삭제합니다.
         */
        delete: operations["deleteBusReview"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookmark/{bookmarkId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 북마크 조회
         * @description 북마크를 조회합니다.
         */
        get: operations["getBookmark"];
        /**
         * 북마크 수정
         * @description 북마크를 수정합니다.
         */
        put: operations["updateBookmark"];
        post?: never;
        /**
         * 북마크 삭제
         * @description 북마크를 삭제합니다.
         */
        delete: operations["deleteBookmark"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subway/station": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 지하철 역 목록 조회
         * @description 지하철 역 목록을 조회합니다.
         */
        get: operations["getStationList"];
        put?: never;
        /**
         * 지하철 역 생성
         * @description 지하철 역을 생성합니다.
         */
        post: operations["createStation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subway-review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 지하철 리뷰 조회
         * @description 지하철 리뷰를 조회합니다.
         */
        get: operations["getSubwayReviewList"];
        put?: never;
        /**
         * 지하철 리뷰 생성
         * @description 지하철 리뷰를 생성합니다.
         */
        post: operations["createSubwayReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bus-review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 버스 리뷰 조회
         * @description 버스 리뷰를 조회합니다.
         */
        get: operations["getBusReviewList"];
        put?: never;
        /**
         * 버스 리뷰 생성
         * @description 버스 리뷰를 생성합니다.
         */
        post: operations["saveBusReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookmark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 북마크 목록 조회
         * @description 북마크 목록을 조회합니다.
         */
        get: operations["getBookmarkList"];
        put?: never;
        /**
         * 북마크 생성
         * @description 북마크를 생성합니다.
         */
        post: operations["createBookmark"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * OAuth 인증 후 회원가입
         * @description OAuth 인증 후 회원가입을 진행합니다.
         */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dev-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 수동 인증
         * @description 수동 인증을 진행합니다.
         */
        get: operations["manualAuth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subway/timetable/{stationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 지하철 시간표 조회
         * @description 지하철 시간표를 조회합니다.
         */
        get: operations["getTimetable"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subway/timetable/{stationId}/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 지하철 시간표 목록 조회
         * @description 지하철 시간표 목록을 조회합니다.
         */
        get: operations["getTimetableList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subway/station/{stationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 지하철 역 조회
         * @description 지하철 역을 조회합니다.
         */
        get: operations["getStation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bus/station": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 버스 정류장 조회
         * @description 버스 정류장을 조회합니다.
         */
        get: operations["getStations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bus/station/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 버스 정류장 상세 조회
         * @description 버스 정류장 상세 정보를 조회합니다.
         */
        get: operations["getStationById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bus/route": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 버스 노선 조회
         * @description 버스 노선을 조회합니다.
         */
        get: operations["getRoutes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bus/route/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 버스 노선 상세 조회
         * @description 버스 노선 상세 정보를 조회합니다.
         */
        get: operations["getRouteById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bus/route-station": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 버스 노선 정류장 목록 조회
         * @description 버스 노선 정류장 목록을 조회합니다. routeId, stationId 는 각각 filter 의 역할을 합니다.
         */
        get: operations["getRouteStations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bus/route-station/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 버스 노선 정류장 조회
         * @description 버스 노선 정류장을 조회합니다.
         */
        get: operations["getRouteStationById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bus/live/{routeStationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 버스 실시간 정보 조회
         * @description 버스 실시간 정보 조회 API
         */
        get: operations["getBusLiveInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bookmark/{bookmarkId}/paths": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 북마크에 연관된 경로 정보를 조회
         * @description 북마크에 연관된 경로 정보(도착 정보, 통계 정보)를 조회합니다.
         */
        get: operations["getBookmarkPathInfos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserUpdateReqDto: {
            nickname: string;
        };
        /** @description 유저 정보 응답 DTO */
        UserRespDto: {
            /** Format: int64 */
            userId: number;
            name: string;
            email: string;
            nickname: string;
            oauthProvider: string;
        };
        ErrorRespDto: {
            message: string;
        };
        SubwayReviewReqDto: {
            /** Format: int64 */
            stationId: number;
            line: string;
            updown: string;
            content?: string;
            timeSlot: string;
            rating: string;
        };
        SubwayReviewRespDto: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            userId: number;
            userName: string;
            /** Format: int64 */
            stationId: number;
            stationName: string;
            /** @enum {string} */
            line: "LINE_ONE" | "LINE_TWO" | "LINE_THREE" | "LINE_FOUR" | "LINE_FIVE" | "LINE_SIX" | "LINE_SEVEN" | "LINE_EIGHT" | "LINE_NINE" | "LINE_UI" | "LINE_GYEONGCHUN" | "LINE_GYEONGUI_JUNGANG" | "LINE_SUIN_BUNDANG" | "LINE_SINBUNDANG" | "LINE_AIRPORT" | "LINE_GYEONGGANG" | "LINE_SEOHAE" | "LINE_GTX_A";
            /** @enum {string} */
            updown: "UP" | "DOWN";
            content: string;
            /** @enum {string} */
            timeSlot: "T_00_00" | "T_00_30" | "T_01_00" | "T_01_30" | "T_02_00" | "T_02_30" | "T_03_00" | "T_03_30" | "T_04_00" | "T_04_30" | "T_05_00" | "T_05_30" | "T_06_00" | "T_06_30" | "T_07_00" | "T_07_30" | "T_08_00" | "T_08_30" | "T_09_00" | "T_09_30" | "T_10_00" | "T_10_30" | "T_11_00" | "T_11_30" | "T_12_00" | "T_12_30" | "T_13_00" | "T_13_30" | "T_14_00" | "T_14_30" | "T_15_00" | "T_15_30" | "T_16_00" | "T_16_30" | "T_17_00" | "T_17_30" | "T_18_00" | "T_18_30" | "T_19_00" | "T_19_30" | "T_20_00" | "T_20_30" | "T_21_00" | "T_21_30" | "T_22_00" | "T_22_30" | "T_23_00" | "T_23_30";
            /** Format: int32 */
            rating: number;
        };
        BusReviewReqDto: {
            /** Format: int64 */
            routeId: number;
            /** Format: int64 */
            busRouteStationId: number;
            content?: string;
            /** @enum {string} */
            timeSlot: "T_00_00" | "T_00_30" | "T_01_00" | "T_01_30" | "T_02_00" | "T_02_30" | "T_03_00" | "T_03_30" | "T_04_00" | "T_04_30" | "T_05_00" | "T_05_30" | "T_06_00" | "T_06_30" | "T_07_00" | "T_07_30" | "T_08_00" | "T_08_30" | "T_09_00" | "T_09_30" | "T_10_00" | "T_10_30" | "T_11_00" | "T_11_30" | "T_12_00" | "T_12_30" | "T_13_00" | "T_13_30" | "T_14_00" | "T_14_30" | "T_15_00" | "T_15_30" | "T_16_00" | "T_16_30" | "T_17_00" | "T_17_30" | "T_18_00" | "T_18_30" | "T_19_00" | "T_19_30" | "T_20_00" | "T_20_30" | "T_21_00" | "T_21_30" | "T_22_00" | "T_22_30" | "T_23_00" | "T_23_30";
            /** Format: int32 */
            rating: number;
        };
        BusReviewRespDto: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            userId: number;
            userName: string;
            /** Format: int64 */
            routeId: number;
            routeName: string;
            /** Format: int64 */
            busRouteStationId: number;
            stationName: string;
            content: string;
            /** @enum {string} */
            timeSlot: "T_00_00" | "T_00_30" | "T_01_00" | "T_01_30" | "T_02_00" | "T_02_30" | "T_03_00" | "T_03_30" | "T_04_00" | "T_04_30" | "T_05_00" | "T_05_30" | "T_06_00" | "T_06_30" | "T_07_00" | "T_07_30" | "T_08_00" | "T_08_30" | "T_09_00" | "T_09_30" | "T_10_00" | "T_10_30" | "T_11_00" | "T_11_30" | "T_12_00" | "T_12_30" | "T_13_00" | "T_13_30" | "T_14_00" | "T_14_30" | "T_15_00" | "T_15_30" | "T_16_00" | "T_16_30" | "T_17_00" | "T_17_30" | "T_18_00" | "T_18_30" | "T_19_00" | "T_19_30" | "T_20_00" | "T_20_30" | "T_21_00" | "T_21_30" | "T_22_00" | "T_22_30" | "T_23_00" | "T_23_30";
            /** Format: int32 */
            rating: number;
        };
        BookmarkDetailReqDto: {
            /** Format: int32 */
            seq: number;
            /** Format: int64 */
            busRouteStationId: number;
        };
        BookmarkReqDto: {
            name: string;
            details: components["schemas"]["BookmarkDetailReqDto"][];
        };
        BookmarkDetailRespDto: {
            /** Format: int32 */
            seq: number;
            routeStation: components["schemas"]["BusRouteStationRespDto"];
        };
        BookmarkRespDto: {
            /** Format: int64 */
            id: number;
            name: string;
            /** Format: int64 */
            userId: number;
            details: components["schemas"]["BookmarkDetailRespDto"][];
        };
        BusRouteStationRespDto: {
            /** Format: int64 */
            busRouteStationId: number;
            /** Format: int64 */
            routeId: number;
            routeName: string;
            /** Format: int64 */
            stationId: number;
            /** Format: int32 */
            stationSeq: number;
            stationName: string;
            /** Format: date-time */
            createdAt: string;
        };
        SubwayStationReqDto: {
            stationName: string;
            stationCode: string;
            line: string;
        };
        SubwayStationRespDto: {
            /** Format: int64 */
            stationId: number;
            stationName: string;
            stationCode: string;
            /** @enum {string} */
            line: "LINE_ONE" | "LINE_TWO" | "LINE_THREE" | "LINE_FOUR" | "LINE_FIVE" | "LINE_SIX" | "LINE_SEVEN" | "LINE_EIGHT" | "LINE_NINE" | "LINE_UI" | "LINE_GYEONGCHUN" | "LINE_GYEONGUI_JUNGANG" | "LINE_SUIN_BUNDANG" | "LINE_SINBUNDANG" | "LINE_AIRPORT" | "LINE_GYEONGGANG" | "LINE_SEOHAE" | "LINE_GTX_A";
        };
        UserCreateReqDto: {
            nickname: string;
        };
        LocalTime: {
            /** Format: int32 */
            hour?: number;
            /** Format: int32 */
            minute?: number;
            /** Format: int32 */
            second?: number;
            /** Format: int32 */
            nano?: number;
        };
        SubwayTimetableRespDto: {
            /** Format: int64 */
            stationId: number;
            stationName: string;
            /** @enum {string} */
            line: "LINE_ONE" | "LINE_TWO" | "LINE_THREE" | "LINE_FOUR" | "LINE_FIVE" | "LINE_SIX" | "LINE_SEVEN" | "LINE_EIGHT" | "LINE_NINE" | "LINE_UI" | "LINE_GYEONGCHUN" | "LINE_GYEONGUI_JUNGANG" | "LINE_SUIN_BUNDANG" | "LINE_SINBUNDANG" | "LINE_AIRPORT" | "LINE_GYEONGGANG" | "LINE_SEOHAE" | "LINE_GTX_A";
            /** @enum {string} */
            dayType: "DAY" | "SAT" | "SUN";
            /** @enum {string} */
            updown: "UP" | "DOWN";
            /** @enum {string} */
            express: "NORMAL" | "EXPRESS";
            arrivalTime: components["schemas"]["LocalTime"];
            startStationName: string;
            endStationName: string;
        };
        BusStationRespDto: {
            /** Format: int64 */
            stationId: number;
            apiStationId: string;
            stationName: string;
            regionName: string;
            /** @enum {string} */
            districtCd: "GAPAENG_GUN" | "GOYANG" | "GWACHEON" | "GWANGMYEONG" | "GWANGJU" | "GURI" | "GUNPO" | "KIMPO" | "NAMYANGJU" | "DONGDUCHEON" | "BUCHEON" | "SEONGNAM" | "SUWON" | "SIHEUNG" | "ANSAN" | "ANSEONG" | "ANYANG" | "YANGJU" | "YANGPYEONG" | "YEJU" | "YEONCHEON" | "OSAN" | "YONGIN" | "UIWANG" | "UJEONGBU" | "ICHUN" | "PAJU" | "PYEONGTAEK" | "POCHON" | "HWASEONG" | "HANNAM" | "SEOUL" | "INCHEON";
            /** @enum {string} */
            centerYn: "NOT_CENTER_STATION" | "CENTER_STATION";
            /** @enum {string} */
            turnYn: "TURN_STATION" | "NOT_TURN_STATION";
            longitude: number;
            latitude: number;
            /** Format: date-time */
            createdAt: string;
        };
        BusRouteRespDto: {
            /** Format: int64 */
            routeId: number;
            apiRouteId: string;
            routeName: string;
            /** @enum {string} */
            routeTypeCd: "DIRECT_SEAT_CITY_BUS" | "SEAT_CITY_BUS" | "GENERAL_CITY_BUS" | "EXPRESS_CITY_BUS" | "DDABOK_CITY_BUS" | "GYEONGGI_CIRCULATION_BUS" | "DIRECT_SEAT_RURAL_BUS" | "SEAT_RURAL_BUS" | "GENERAL_RURAL_BUS" | "VILLAGE_BUS" | "HIGH_SPEED_INTERCITY_BUS" | "SEAT_INTERCITY_BUS" | "GENERAL_INTERCITY_BUS" | "LIMOUSINE_AIRPORT_BUS" | "SEAT_AIRPORT_BUS" | "GENERAL_AIRPORT_BUS";
            routeTypeName: string;
            /** @enum {string} */
            districtCd: "GAPAENG_GUN" | "GOYANG" | "GWACHEON" | "GWANGMYEONG" | "GWANGJU" | "GURI" | "GUNPO" | "KIMPO" | "NAMYANGJU" | "DONGDUCHEON" | "BUCHEON" | "SEONGNAM" | "SUWON" | "SIHEUNG" | "ANSAN" | "ANSEONG" | "ANYANG" | "YANGJU" | "YANGPYEONG" | "YEJU" | "YEONCHEON" | "OSAN" | "YONGIN" | "UIWANG" | "UJEONGBU" | "ICHUN" | "PAJU" | "PYEONGTAEK" | "POCHON" | "HWASEONG" | "HANNAM" | "SEOUL" | "INCHEON";
            upFirstTime: string;
            upLastTime: string;
            downFirstTime: string;
            downLastTime: string;
            startMobileNo: string;
            /** Format: int64 */
            startStationId: number;
            startStationName: string;
            /** Format: int64 */
            endStationId: number;
            endMobileNo: string;
            endStationName: string;
            regionName: string;
            /** Format: int32 */
            peekAlloc: number;
            /** Format: int32 */
            nPeekAlloc: number;
        };
        BusArrivalRespDto: {
            /** Format: int32 */
            locationNo1: number;
            /** Format: int32 */
            predictTime1: number;
            plateNo1: string;
            /** Format: int32 */
            remainSeatCnt1: number;
            /** Format: int32 */
            locationNo2: number;
            /** Format: int32 */
            predictTime2: number;
            plateNo2: string;
            /** Format: int32 */
            remainSeatCnt2: number;
            /** @enum {string} */
            flag: "RUN" | "PASS" | "STOP" | "WAIT" | "UNKNOWN";
        };
        BusLiveInfoRespDto: {
            /** Format: int64 */
            routeId: number;
            routeName: string;
            routeStation: components["schemas"]["BusRouteStationRespDto"];
            arrivalInfo?: components["schemas"]["BusArrivalRespDto"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 유저 정보를 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRespDto"];
                };
            };
            /** @description 해당 ID의 유저가 존재하지 않음. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                user_id: number;
            };
            cookie?: never;
        };
        /** @description User Update Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 유저 정보를 수정했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRespDto"];
                };
            };
            /** @description 잘못된 요청, 에러 내용은 message 필드 참조. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 유저 정보를 삭제했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description 잘못된 요청, 에러 내용은 message 필드 참조. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 유저 정보를 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRespDto"];
                };
            };
            /** @description 권한이 없습니다. (유저가 삭제되었을 가능성) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    updateMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User Update Request */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdateReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 유저 정보를 수정했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRespDto"];
                };
            };
            /** @description 잘못된 요청, 에러 내용은 message 필드 참조. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 권한이 없습니다. (유저가 삭제되었을 가능성) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    updateSubwayReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 지하철 리뷰 ID */
                subway_review_id: number;
            };
            cookie?: never;
        };
        /** @description 지하철 리뷰 수정 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubwayReviewReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 지하철 리뷰를 수정했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubwayReviewRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    deleteSubwayReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 지하철 리뷰 ID */
                subway_review_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 지하철 리뷰를 삭제했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    updateBusReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 버스 리뷰 ID */
                bus_review_id: number;
            };
            cookie?: never;
        };
        /** @description 버스 리뷰 수정 요청 DTO */
        requestBody: {
            content: {
                "application/json": components["schemas"]["BusReviewReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 버스 리뷰를 수정했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusReviewRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    deleteBusReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 버스 리뷰 ID */
                bus_review_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 버스 리뷰를 삭제했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 북마크 ID */
                bookmarkId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 북마크를 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookmarkRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 해당 ID의 북마크가 존재하지 않습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    updateBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bookmarkId: number;
            };
            cookie?: never;
        };
        /** @description 북마크 수정 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookmarkReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 북마크를 수정했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookmarkRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    deleteBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 북마크 ID */
                bookmarkId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 북마크를 삭제했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getStationList: {
        parameters: {
            query?: {
                /** @description 지하철 역 이름 */
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 지하철 역 목록을 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubwayStationRespDto"][];
                };
            };
        };
    };
    createStation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 지하철 역 생성 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubwayStationReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 지하철 역을 생성했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubwayStationRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getSubwayReviewList: {
        parameters: {
            query: {
                /** @description 지하철 역 ID */
                stationId: number;
                /** @description 상행/하행 */
                updown?: "UP" | "DOWN";
                /** @description 시간대 */
                timeSlot?: "T_00_00" | "T_00_30" | "T_01_00" | "T_01_30" | "T_02_00" | "T_02_30" | "T_03_00" | "T_03_30" | "T_04_00" | "T_04_30" | "T_05_00" | "T_05_30" | "T_06_00" | "T_06_30" | "T_07_00" | "T_07_30" | "T_08_00" | "T_08_30" | "T_09_00" | "T_09_30" | "T_10_00" | "T_10_30" | "T_11_00" | "T_11_30" | "T_12_00" | "T_12_30" | "T_13_00" | "T_13_30" | "T_14_00" | "T_14_30" | "T_15_00" | "T_15_30" | "T_16_00" | "T_16_30" | "T_17_00" | "T_17_30" | "T_18_00" | "T_18_30" | "T_19_00" | "T_19_30" | "T_20_00" | "T_20_30" | "T_21_00" | "T_21_30" | "T_22_00" | "T_22_30" | "T_23_00" | "T_23_30";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 지하철 리뷰를 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubwayReviewRespDto"][];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    createSubwayReview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 지하철 리뷰 생성 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubwayReviewReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 지하철 리뷰를 생성했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubwayReviewRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getBusReviewList: {
        parameters: {
            query: {
                /** @description 버스 노선 ID */
                routeId: number;
                /** @description 버스 노선 경유 정류장 ID */
                busRouteStationId?: number;
                /** @description 시간대 */
                timeSlot?: "T_00_00" | "T_00_30" | "T_01_00" | "T_01_30" | "T_02_00" | "T_02_30" | "T_03_00" | "T_03_30" | "T_04_00" | "T_04_30" | "T_05_00" | "T_05_30" | "T_06_00" | "T_06_30" | "T_07_00" | "T_07_30" | "T_08_00" | "T_08_30" | "T_09_00" | "T_09_30" | "T_10_00" | "T_10_30" | "T_11_00" | "T_11_30" | "T_12_00" | "T_12_30" | "T_13_00" | "T_13_30" | "T_14_00" | "T_14_30" | "T_15_00" | "T_15_30" | "T_16_00" | "T_16_30" | "T_17_00" | "T_17_30" | "T_18_00" | "T_18_30" | "T_19_00" | "T_19_30" | "T_20_00" | "T_20_30" | "T_21_00" | "T_21_30" | "T_22_00" | "T_22_30" | "T_23_00" | "T_23_30";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 버스 리뷰를 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusReviewRespDto"][];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    saveBusReview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 버스 리뷰 생성 요청 DTO */
        requestBody: {
            content: {
                "application/json": components["schemas"]["BusReviewReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 버스 리뷰를 생성했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusReviewRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getBookmarkList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 북마크 목록을 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BookmarkRespDto"][];
                };
            };
        };
    };
    createBookmark: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 북마크 생성 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookmarkReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 북마크를 생성했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookmarkRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description 회원가입 정보 */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreateReqDto"];
            };
        };
        responses: {
            /** @description 정상적으로 회원가입을 진행했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    manualAuth: {
        parameters: {
            query: {
                authRole: "UNREGISTERED" | "USER" | "ADMIN";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 로그인 되었습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getTimetable: {
        parameters: {
            query: {
                /** @description 요일 타입 */
                dayTypeCode: "DAY" | "SAT" | "SUN";
                /** @description 상행/하행 */
                updownCode: "UP" | "DOWN";
                /**
                 * @description 시간 (HH:MM)
                 * @example 08:00
                 */
                time: string;
            };
            header?: never;
            path: {
                /** @description 역 ID */
                stationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 지하철 시간표를 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubwayTimetableRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 해당 ID의 지하철 시간표가 존재하지 않습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getTimetableList: {
        parameters: {
            query: {
                /** @description 요일 타입 */
                dayTypeCode: "DAY" | "SAT" | "SUN";
                /** @description 상행/하행 */
                updownCode: "UP" | "DOWN";
                /**
                 * @description 시작 시간 (HH:MM)
                 * @example 08:00
                 */
                startTime: string;
                /**
                 * @description 종료 시간 (HH:MM)
                 * @example 08:00
                 */
                endTime: string;
            };
            header?: never;
            path: {
                /** @description 역 ID */
                stationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 지하철 시간표 목록을 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubwayTimetableRespDto"];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getStation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 역 ID */
                stationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 지하철 역을 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubwayStationRespDto"];
                };
            };
            /** @description 해당 ID의 지하철 역이 존재하지 않습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getStations: {
        parameters: {
            query?: {
                /** @description 버스 정류장 이름 */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 버스 정류장을 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BusStationRespDto"][];
                };
            };
        };
    };
    getStationById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 버스 정류장 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 버스 정류장 상세 정보를 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
            /** @description 해당 ID의 버스 정류장이 존재하지 않습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getRoutes: {
        parameters: {
            query?: {
                /** @description 버스 노선 이름 */
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 버스 노선을 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BusRouteRespDto"][];
                };
            };
        };
    };
    getRouteById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 버스 노선 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 버스 노선 상세 정보를 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusRouteRespDto"];
                };
            };
            /** @description 해당 ID의 버스 노선이 존재하지 않습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getRouteStations: {
        parameters: {
            query?: {
                /** @description 버스 노선 ID */
                routeId?: number;
                /** @description 버스 정류장 ID */
                stationId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 버스 노선 정류장 목록을 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BusRouteStationRespDto"][];
                };
            };
        };
    };
    getRouteStationById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 버스 노선 정류장 ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 버스 노선 정류장을 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusRouteStationRespDto"];
                };
            };
            /** @description 해당 ID의 버스 노선 정류장이 존재하지 않습니다. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getBusLiveInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 노선 정류장 ID */
                routeStationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 성공 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["BusLiveInfoRespDto"];
                };
            };
            /** @description 잘못된 요청 */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
    getBookmarkPathInfos: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 북마크 ID */
                bookmarkId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 정상적으로 북마크에 연관된 경로 정보를 조회했습니다. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusLiveInfoRespDto"][];
                };
            };
            /** @description 잘못된 요청입니다. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
            /** @description 권한이 없습니다. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorRespDto"];
                };
            };
        };
    };
}
